import json
import os
from datetime import datetime

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏
history_file = "history.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ JSON
def read_history():
    if os.path.exists(history_file):
        with open(history_file, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON
def write_history(history_data):
    with open(history_file, "w", encoding="utf-8") as f:
        json.dump(history_data, f, ensure_ascii=False, indent=4)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
def log_ticket_check(found_tickets):
    # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    history = read_history()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ
    check_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    history.append({
        "time": check_time,
        "found_tickets": found_tickets
    })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª
    write_history(history)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
def check_tickets():
    try:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–µ—Ç—ã...")
        found_tickets = []

        start_date = datetime.strptime(START_DATE, "%Y-%m-%d")
        dates = [(start_date + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(6)]

        with ThreadPoolExecutor() as executor:
            futures = {executor.submit(get_ticket_info, date): date for date in dates}
            for future in futures:
                tickets = future.result()
                if tickets:
                    found_tickets.extend(tickets)

        if found_tickets:
            message = "üöÜ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã:\n"
            for ticket in found_tickets:
                message += f"–ü–æ–µ–∑–¥ {ticket['train']} ({ticket['date']})\n–°—Å—ã–ª–∫–∞: {ticket['link']}\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:
                send_telegram_message(chunk)
                time.sleep(1)

            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            logging.info("‚ùå –ù–∏–∂–Ω–∏—Ö –º–µ—Å—Ç –Ω–µ—Ç.")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        log_ticket_check(found_tickets)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_tickets: {e}")
