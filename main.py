import json
import os

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
history_file = "history.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
def save_history(ticket_info):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        if os.path.exists(history_file):
            with open(history_file, "r") as file:
                history = json.load(file)
        else:
            history = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append(ticket_info)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª
        with open(history_file, "w") as file:
            json.dump(history, file, indent=4)

        logging.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–∞–º–∏
def check_tickets():
    try:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–µ—Ç—ã...")
        found_tickets = []
        
        start_date = datetime.strptime(START_DATE, "%Y-%m-%d")
        dates = [(start_date + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(5)]  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 5 –¥–Ω–µ–π
        
        with ThreadPoolExecutor() as executor:
            futures = {executor.submit(get_ticket_info, date): date for date in dates}
            for future in futures:
                tickets = future.result()
                if tickets:
                    found_tickets.extend(tickets)

        if found_tickets:
            message = "üöÜ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã:\n"
            for ticket in found_tickets:
                message += f"–ü–æ–µ–∑–¥ {ticket['train']} ({ticket['date']})\n–°—Å—ã–ª–∫–∞: {ticket['link']}\n–ú–µ—Å—Ç–∞: {ticket['seats']}\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:
                send_telegram_message(chunk)
                time.sleep(1)

            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
            for ticket in found_tickets:
                save_history(ticket)

        else:
            logging.info("‚ùå –ù–∏–∂–Ω–∏—Ö –º–µ—Å—Ç –Ω–µ—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_tickets: {e}")
