import os
import time
import logging
import requests
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor
import schedule
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤
STATION_FROM = os.getenv("STATION_FROM")
STATION_TO = os.getenv("STATION_TO")
TRAINS = os.getenv("TRAINS", "").split(",")  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫
START_DATE = os.getenv("START_DATE")  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
CLASS_ID = "–ö"  # –ö—É–ø–µ

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def check_env_vars():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ["STATION_FROM", "STATION_TO", "TRAINS", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID", "START_DATE"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        exit(1)

check_env_vars()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º

def get_ticket_info(date, retries=3):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    url = f"https://booking.uz.gov.ua/search-trips/{STATION_FROM}/{STATION_TO}/list?startDate={date}"
    headers = {"User-Agent": "Mozilla/5.0"}

    for attempt in range(retries):
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            soup = BeautifulSoup(response.text, "html.parser")
            return parse_tickets(soup, date)
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    return []

def parse_tickets(soup, date):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö"""
    tickets = []
    for trip in soup.find_all("div", class_="trip"):
        train_number_tag = trip.find("div", class_="train-number")
        if not train_number_tag:
            continue

        train_number = train_number_tag.text.strip()
        if train_number not in TRAINS:
            continue

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–∞—Å—Å—ã
        class_links = trip.find_all("a", class_="class-link")
        for link in class_links:
            href = link.get("href", "")
            if CLASS_ID in href:
                seat_text = link.text.strip()
                try:
                    available_seats = int(seat_text.split()[0])
                except ValueError:
                    continue  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                if available_seats > 0:
                    tickets.append({
                        "train": train_number,
                        "date": date,
                        "link": f"https://booking.uz.gov.ua{href}"
                    })
    return tickets

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}

    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def check_tickets():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–µ—Ç—ã...")
    found_tickets = []

    start_date = datetime.strptime(START_DATE, "%Y-%m-%d")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç
    dates = [(start_date + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(6)]  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ 6 –¥–Ω–µ–π

    with ThreadPoolExecutor() as executor:
        futures = {executor.submit(get_ticket_info, date): date for date in dates}

        for future in futures:
            tickets = future.result()
            if tickets:
                found_tickets.extend(tickets)

    if found_tickets:
        message = "üöÜ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã —Å –Ω–∏–∂–Ω–∏–º–∏ –º–µ—Å—Ç–∞–º–∏:\n"
        for ticket in found_tickets:
            message += f"–ü–æ–µ–∑–¥ {ticket['train']} ({ticket['date']})\n–°—Å—ã–ª–∫–∞: {ticket['link']}\n\n"
        
        # –ï—Å–ª–∏ –±–∏–ª–µ—Ç–æ–≤ –º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–∞—É–∑–∞–º–∏
        for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:  
            send_telegram_message(chunk)
            time.sleep(1)

        logging.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        logging.info("‚ùå –ù–∏–∂–Ω–∏—Ö –º–µ—Å—Ç –Ω–µ—Ç.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
schedule.every(10).minutes.do(check_tickets)

if __name__ == "__main__":
    logging.info("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        schedule.run_pending()
        time.sleep(1)
