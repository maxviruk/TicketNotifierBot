import os
import time
import logging
import requests
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor
import schedule
from datetime import datetime, timedelta
import subprocess
import json
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º webdriver-manager

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
try:
    result = subprocess.run(["pip", "list"], capture_output=True, text=True)
    logging.info(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:\n{result.stdout}")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
STATION_FROM = os.getenv("STATION_FROM")
STATION_TO = os.getenv("STATION_TO")
TRAINS = os.getenv("TRAINS", "").split(",")
START_DATE = os.getenv("START_DATE")
CLASS_ID = os.getenv("CLASS_ID", "–ö")  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_env_vars():
    required_vars = ["STATION_FROM", "STATION_TO", "TRAINS", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID", "START_DATE"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        exit(1)

check_env_vars()
logging.info(f"üîç STATION_FROM: {STATION_FROM}, STATION_TO: {STATION_TO}, TRAINS: {TRAINS}, START_DATE: {START_DATE}")
logging.info(f"üîç TELEGRAM_BOT_TOKEN: {bool(TELEGRAM_BOT_TOKEN)}, TELEGRAM_CHAT_ID: {bool(TELEGRAM_CHAT_ID)}")

# –ù–∞—Å—Ç—Ä–æ–∏–º –æ–ø—Ü–∏–∏ –¥–ª—è Selenium
chrome_options = Options()
chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ –±–µ–∑–≥–æ–ª–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ UI)
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--no-sandbox")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é Selenium
def get_page_with_selenium(url):
    driver.get(url)
    time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return driver.page_source

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é BeautifulSoup
def parse_with_beautifulsoup(html):
    soup = BeautifulSoup(html, 'html.parser')
    
    # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã <h4> —Å –∫–ª–∞—Å—Å–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "–ö—É–ø–µ"
    coupe_elements = soup.find_all('h4', class_="Typography Typography--h4 flex justify-center text-center lg:hidden")
    
    tickets = []
    for coupe in coupe_elements:
        text = coupe.text.strip()
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö—É–ø–µ: 31")
        if "–ö—É–ø–µ" in text:
            available_seats = int(text.split(":")[1].strip())
            tickets.append(available_seats)
    return tickets

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞
def click_button_if_needed(html, driver):
    soup = BeautifulSoup(html, 'html.parser')
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç <h4> —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç
    coupe_elements = soup.find_all('h4', class_="Typography Typography--h4 flex justify-center text-center lg:hidden")
    
    for coupe in coupe_elements:
        text = coupe.text.strip()
        if "–ö—É–ø–µ" in text:
            available_seats = int(text.split(":")[1].strip())
            if available_seats >= 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç
                # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç <div>, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞
                parent_div = coupe.find_parent('div')
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                button = parent_div.find_element(By.TAG_NAME, "button")
                
                if button:
                    print("–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É–ø–µ!")
                    button.click()  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
                    time.sleep(2)
                    return True
    return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö
def get_ticket_info(date, retries=3):
    url = f"https://booking.uz.gov.ua/search-trips/{STATION_FROM}/{STATION_TO}/list?startDate={date}"
    headers = {"User-Agent": "Mozilla/5.0"}
    
    for attempt in range(retries):
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")
            return parse_tickets(soup, date)
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            time.sleep(5)
    return []

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
def parse_tickets(soup, date):
    tickets = []
    for trip in soup.find_all("div", class_="trip"):
        train_name_tag = trip.find("div", class_="skew-x-12")
        if not train_number_tag:
            continue
        
        train_number = train_number_tag.text.strip()
        if train_number not in TRAINS:
            continue
            
        train_name = train_name_tag.text.strip() if train_name_tag else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        coupe_tag = trip.find("h4", class_="Typography Typography--h4 flex justify-center text-center lg:hidden")
        coupe_info = coupe_tag.text.strip() if coupe_tag else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        for link in trip.find_all("a", class_="class-link"):
            href = link.get("href", "")
            if CLASS_ID in href:
                seat_text = link.text.strip()
                try:
                    available_seats = int(seat_text.split()[0])
                except ValueError:
                    continue
                
                if available_seats > 0:
                    ticket_info = {
                        "train": train_number, 
                        "train_name": train_name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–µ–∑–¥–∞
                        "date": date, 
                        "coupe_info": coupe_info,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–µ
                        "link": f"https://booking.uz.gov.ua{href}",
                        "seats": available_seats
                    }
                    tickets.append(ticket_info)
    return tickets

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤
def check_tickets():
    try:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–µ—Ç—ã...")
        found_tickets = []
        
        start_date = datetime.strptime(START_DATE, "%Y-%m-%d")
        dates = [(start_date + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(5)]  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 5 –¥–Ω–µ–π
        
        with ThreadPoolExecutor() as executor:
            futures = {executor.submit(get_ticket_info, date): date for date in dates}
            for future in futures:
                tickets = future.result()
                if tickets:
                    found_tickets.extend(tickets)

        if found_tickets:
            message = "üöÜ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã:\n"
            for ticket in found_tickets:
                message += f"–ü–æ–µ–∑–¥ {ticket['train']} ({ticket['train_name']})\n–ö—É–ø–µ: {ticket['coupe_info']}\n–°—Å—ã–ª–∫–∞: {ticket['link']}\n–ú–µ—Å—Ç–∞: {ticket['seats']}\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:
                send_telegram_message(chunk)
                time.sleep(1)

            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            logging.info("‚ùå –ù–∏–∂–Ω–∏—Ö –º–µ—Å—Ç –Ω–µ—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_tickets: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
schedule.every(5).minutes.do(check_tickets)

if __name__ == "__main__":
    logging.info("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...")
        schedule.run_pending()
        time.sleep(60)

    driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
