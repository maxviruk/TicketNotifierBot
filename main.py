import os
import time
import logging
import requests
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor
import schedule
from datetime import datetime, timedelta
import subprocess
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
try:
    result = subprocess.run(["pip", "list"], capture_output=True, text=True)
    logging.info(f"\U0001F4E6 –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:\n{result.stdout}")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
STATION_FROM = os.getenv("STATION_FROM")
STATION_TO = os.getenv("STATION_TO")
TRAINS = os.getenv("TRAINS", "").split(",")
START_DATE = os.getenv("START_DATE")
CLASS_ID = os.getenv("CLASS_ID", "–ö")  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def check_env_vars():
    required_vars = ["STATION_FROM", "STATION_TO", "TRAINS", "TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID", "START_DATE"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        exit(1)

check_env_vars()
logging.info(f"üîç STATION_FROM: {STATION_FROM}, STATION_TO: {STATION_TO}, TRAINS: {TRAINS}, START_DATE: {START_DATE}")
logging.info(f"üîç TELEGRAM_BOT_TOKEN: {bool(TELEGRAM_BOT_TOKEN)}, TELEGRAM_CHAT_ID: {bool(TELEGRAM_CHAT_ID)}")

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ ChromeDriver
chrome_driver_path = "/usr/local/bin/chromedriver"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ChromeDriver

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è Chrome
chrome_options = Options()
chrome_options.add_argument("--headless")  # –ë–µ–∑–≥–æ–ª–æ–≤—ã–π —Ä–µ–∂–∏–º
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
driver = webdriver.Chrome(service=Service(chrome_driver_path), options=chrome_options)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö
def get_ticket_info(date, retries=3):
    url = f"https://booking.uz.gov.ua/search-trips/{STATION_FROM}/{STATION_TO}/list?startDate={date}"
    headers = {"User-Agent": "Mozilla/5.0"}
    
    for attempt in range(retries):
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")
            return parse_tickets(soup, date)
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            time.sleep(5)
    return []

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
def parse_tickets(soup, date):
    tickets = []
    for trip in soup.find_all("div", class_="trip"):
        train_name_tag = trip.find("div", class_="skew-x-12")
        if not train_name_tag:
            continue
        
        train_number = train_name_tag.text.strip()
        if train_number not in TRAINS:
            continue
            
        train_name = train_name_tag.text.strip() if train_name_tag else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        coupe_tag = trip.find("h4", class_="Typography Typography--h4 flex justify-center text-center lg:hidden")
        coupe_info = coupe_tag.text.strip() if coupe_tag else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        for link in trip.find_all("a", class_="class-link"):
            href = link.get("href", "")
            if CLASS_ID in href:
                seat_text = link.text.strip()
                try:
                    available_seats = int(seat_text.split()[0])
                except ValueError:
                    continue
                
                if available_seats > 0:
                    ticket_info = {
                        "train": train_number, 
                        "train_name": train_name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–µ–∑–¥–∞
                        "date": date, 
                        "coupe_info": coupe_info,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–µ
                        "link": f"https://booking.uz.gov.ua{href}",
                        "seats": available_seats
                    }
                    tickets.append(ticket_info)
    return tickets

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤
def check_tickets():
    try:
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–µ—Ç—ã...")
        found_tickets = []
        
        start_date = datetime.strptime(START_DATE, "%Y-%m-%d")
        dates = [(start_date + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(5)]  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 5 –¥–Ω–µ–π
        
        with ThreadPoolExecutor() as executor:
            futures = {executor.submit(get_ticket_info, date): date for date in dates}
            for future in futures:
                tickets = future.result()
                if tickets:
                    found_tickets.extend(tickets)

        if found_tickets:
            message = "üöÜ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã:\n"
            for ticket in found_tickets:
                message += f"–ü–æ–µ–∑–¥ {ticket['train']} ({ticket['train_name']})\n–ö—É–ø–µ: {ticket['coupe_info']}\n–°—Å—ã–ª–∫–∞: {ticket['link']}\n–ú–µ—Å—Ç–∞: {ticket['seats']}\n\n"
            
            for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:
                send_telegram_message(chunk)
                time.sleep(1)
            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –±–∏–ª–µ—Ç—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            logging.info("‚ùå –ù–∏–∂–Ω–∏—Ö –º–µ—Å—Ç –Ω–µ—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_tickets: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
schedule.every(5).minutes.do(check_tickets)

if __name__ == "__main__":
    logging.info("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...")
        schedule.run_pending()
        time.sleep(60)
